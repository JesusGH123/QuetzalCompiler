# program
## def-list
### def-list
#### def-list
#### def
##### fun-def
###### id
####### sqr
###### (
###### param-list
####### id-list
######## id
######### x
######## id-list-cont
###### )
###### {
###### var-def-list
###### stmt-list
####### stmt-list
####### stmt
######## stmt-return
######### return
######### expr
########## expr-or
########### expr-and
############ expr-comp
############# expr-rel
############## expr-add
############### expr-mul
################ expr-mul
################# expr-unary
################## expr-primary
################### id
#################### x
################ op-mul
################# *
################ expr-unary
################# expr-primary
################## id
################### x
######### ;
###### }
### def
#### fun-def
##### id
###### main
##### (
##### param-list
##### )
##### {
##### var-def-list
###### var-def-list
###### var-def
####### var
####### var-list
######## id-list
######### id
########## array
######### id-list-cont
########## ,
########## id
########### sum
########## id-list-cont
########### ,
########### id
############ i
########### id-list-cont
############ ,
############ id
############# j
############ id-list-cont
############# ,
############# id
############## x
############# id-list-cont
####### ;
##### stmt-list
###### stmt-list
####### stmt-list
######## stmt-list
######### stmt-list
######### stmt
########## stmt-assign
########### id
############ sum
########### =
########### expr
############ expr-or
############# expr-and
############## expr-comp
############### expr-rel
################ expr-add
################# expr-mul
################## expr-unary
################### expr-primary
#################### lit
##################### lit-int
########### ;
######## stmt
######### stmt-assign
########## id
########### i
########## =
########## expr
########### expr-or
############ expr-and
############# expr-comp
############## expr-rel
############### expr-add
################ expr-mul
################# expr-unary
################## expr-primary
################### lit
#################### lit-int
########## ;
####### stmt
######## stmt-loop
######### loop
######### {
######### stmt-list
########## stmt-list
########### stmt-list
############ stmt-list
############# stmt-list
############## stmt-list
############## stmt
############### stmt-if
################ if
################ (
################ expr
################# expr-or
################## expr-and
################### expr-comp
#################### expr-rel
##################### expr-rel
###################### expr-add
####################### expr-mul
######################## expr-unary
######################### expr-primary
########################## id
########################### i
##################### op-rel
###################### >=
##################### expr-add
###################### expr-unary
####################### expr-primary
######################## fun-call
######################### id
########################## size
######################### (
######################### expr-list
########################## expr
########################### expr-or
############################ expr-and
############################# expr-comp
############################## expr-rel
############################### expr-add
################################ expr-mul
################################# expr-unary
################################## expr-primary
################################### id
#################################### array
########################## expr-list-cont
######################### )
################ )
################ {
################ stmt-list
################# stmt-list
################# stmt
################## stmt-break
################### break
################### ;
################ }
################ else-if-list
################ else-stmt
############# stmt
############## stmt-assign
############### id
################ x
############### =
############### expr
################ expr-or
################# expr-and
################## expr-comp
################### expr-rel
#################### expr-add
##################### expr-mul
###################### expr-unary
####################### expr-primary
######################## fun-call
######################### id
########################## get
######################### (
######################### expr-list
########################## expr
########################### expr-or
############################ expr-and
############################# expr-comp
############################## expr-rel
############################### expr-add
################################ expr-mul
################################# expr-unary
################################## expr-primary
################################### id
#################################### array
########################## expr-list-cont
########################### ,
########################### expr
############################ expr-or
############################# expr-and
############################## expr-comp
############################### expr-rel
################################ expr-add
################################# expr-mul
################################## expr-unary
################################### expr-primary
#################################### id
##################################### i
########################### expr-list-cont
######################### )
############### ;
############ stmt
############# stmt-incr
############## inc
############## id
############### i
############## ;
########### stmt
############ stmt-if
############# if
############# (
############# expr
############## expr-or
############### expr-and
################ expr-comp
################# expr-comp
################## expr-rel
################### expr-add
#################### expr-mul
##################### expr-unary
###################### expr-primary
####################### id
######################## x
################# op-comp
################## ==
################# expr-rel
################## expr-add
################### expr-mul
#################### expr-unary
##################### expr-primary
###################### lit
####################### lit-int
############# )
############# {
############# stmt-list
############## stmt-list
############## stmt
############### stmt-break
################ break
################ ;
############# }
############# else-if-list
############# else-stmt
########## stmt
########### stmt-if
############ if
############ (
############ expr
############# expr-or
############## expr-and
############### expr-comp
################ expr-rel
################# expr-rel
################## expr-add
################### expr-mul
#################### expr-unary
##################### expr-primary
###################### id
####################### x
################# op-rel
################## <=
################# expr-add
################## expr-unary
################### expr-primary
#################### lit
##################### lit-int
############ )
############ {
############ stmt-list
############ }
############ else-if-list
############ else-stmt
############# else
############# {
############# stmt-list
############## stmt-list
############### stmt-list
############### stmt
################ stmt-assign
################# id
################## j
################# =
################# expr
################## expr-or
################### expr-and
#################### expr-comp
##################### expr-rel
###################### expr-add
####################### expr-mul
######################## expr-unary
######################### expr-primary
########################## lit
########################### lit-int
################# ;
############## stmt
############### stmt-loop
################ loop
################ {
################ stmt-list
################# stmt-list
################## stmt-list
################## stmt
################### stmt-incr
#################### inc
#################### id
##################### j
#################### ;
################# stmt
################## stmt-if
################### if
################### (
################### expr
#################### expr-or
##################### expr-and
###################### expr-comp
####################### expr-rel
######################## expr-rel
######################### expr-add
########################## expr-mul
########################### expr-unary
############################ expr-primary
############################# id
############################## j
######################## op-rel
######################### >
######################## expr-add
######################### expr-unary
########################## expr-primary
########################### id
############################ x
################### )
################### {
################### stmt-list
#################### stmt-list
#################### stmt
##################### stmt-break
###################### break
###################### ;
################### }
################### else-if-list
#################### else-if-list
##################### else-if-list
##################### elif
##################### (
##################### expr
###################### expr-or
####################### expr-and
######################## expr-comp
######################### expr-comp
########################## expr-rel
########################### expr-add
############################ expr-mul
############################# expr-unary
############################## expr-primary
############################### id
################################ x
######################### op-comp
########################## ==
######################### expr-rel
########################## expr-add
########################### expr-mul
############################ expr-unary
############################# expr-primary
############################## id
############################### j
##################### )
##################### {
##################### stmt-list
###################### stmt-list
###################### stmt
####################### stmt-assign
######################## id
######################### sum
######################## =
######################## expr
######################### expr-or
########################## expr-and
########################### expr-comp
############################ expr-rel
############################# expr-add
############################## expr-add
############################### expr-mul
################################ expr-unary
################################# expr-primary
################################## id
################################### sum
############################## op-add
############################### +
############################## expr-mul
############################### expr-unary
################################ expr-primary
################################# id
################################## x
######################## ;
##################### }
#################### elif
#################### (
#################### expr
##################### expr-or
###################### expr-and
####################### expr-comp
######################## expr-comp
######################### expr-rel
########################## expr-add
########################### expr-mul
############################ expr-mul
############################# expr-unary
############################## expr-primary
############################### id
################################ x
############################ op-mul
############################# %
############################ expr-unary
############################# expr-primary
############################## id
############################### j
######################## op-comp
######################### ==
######################## expr-rel
######################### expr-add
########################## expr-mul
########################### expr-unary
############################ expr-primary
############################# lit
############################## lit-int
#################### )
#################### {
#################### stmt-list
##################### stmt-list
##################### stmt
###################### stmt-break
####################### break
####################### ;
#################### }
################### else-stmt
################ }
############# }
######### }
###### stmt
####### stmt-if
######## if
######## (
######## expr
######### expr-or
########## expr-and
########### expr-comp
############ expr-comp
############# expr-rel
############## expr-add
############### expr-mul
################ expr-unary
################# expr-primary
################## id
################### sum
############ op-comp
############# ==
############ expr-rel
############# expr-add
############## expr-mul
############### expr-unary
################ expr-primary
################# lit
################## lit-int
######## )
######## {
######## stmt-list
######### stmt-list
######### stmt
########## stmt-fun-call
########### fun-call
############ id
############# prints
############ (
############ expr-list
############# expr
############## expr-or
############### expr-and
################ expr-comp
################# expr-rel
################## expr-add
################### expr-mul
#################### expr-unary
##################### expr-primary
###################### lit
####################### lit-str
############# expr-list-cont
############ )
########### ;
######## }
######## else-if-list
######## else-stmt
######### else
######### {
######### stmt-list
########## stmt-list
########## stmt
########### stmt-fun-call
############ fun-call
############# id
############## prints
############# (
############# expr-list
############## expr
############### expr-or
################ expr-and
################# expr-comp
################## expr-rel
################### expr-add
#################### expr-mul
##################### expr-unary
###################### expr-primary
####################### lit
######################## lit-str
############## expr-list-cont
############# )
############ ;
######### }
##### }
